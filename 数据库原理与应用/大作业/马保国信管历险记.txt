# encoding=utf-8
import pymssql
import numpy as np
import random
import pandas as pd

# server="DESKTOP-6AB6V57"#服务器名称
# user="sa"#账户名称
# pwd="123456"#密码
# db="MBG"#数据库名称
#
# def GetConnect():
#     conn = pymssql.connect(host=server,user=user,password=pwd,database=db,charset="utf8")
#     cur=conn.cursor()
#     if not cur:
#         raise(NameError,"连接失败")
#     else:
#         print("连接成功")
#         return cur
#
# if __name__=='__main__':
#     GetConnect()

# 假定传入“人物匹配数据表”并读取为dataframe
roles = pd.DataFrame(
    {
        'character': ['play', '梨姜', 'kill', '陈姨', 'chuang', '马保国', '马保国', '马保国', '马保国', '马保国'],
        'hair': [10, 13, 19, 40, 49, 20, 26, 38, 44, 56],
        'attack': [2, 4, 5, 6, 7, 3, 5, 5, 7, 9],
        'defend': [1, 2, 2, 3, 3, 1, 2, 3, 3, 3, ],
        'level': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5],
        'type': ["bot", "bot", "bot", "bot", "bot", "player", "player", "player", "player", "player"],
        "cno" : ['01','02','03','04','05','10','20','30','40','50']
    }
)

# 假定传入“卡牌匹配数据表”并读取为dataframe
cards = pd.DataFrame(
    {
        'card': ['小作业', '实验', '大作业', "考试", "学生条例", "补课", "黑芝麻", "生姜洗发水", "左正蹬", "右鞭腿", "左刺拳", "骗", "太极拳", "偷袭"
            , "闪电鞭", "拖ddl", "鸽", "接化发", "耗子尾汁", "混元功法", "英国大理石", "大E了啊"],
        'hair': [0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, ],
        'attack': [1, 1, 2, 3, 0, 0, 0, 0, 1, 2, 3, 2, 1, 2, 3, 0, 0, 0, 0, 1, 2, 3],
        'defend': [0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0],
        'type': ["bot", "bot", "bot", "bot", "bot", "bot", "bot", "bot", "bot", "bot", "bot", "player", "player",
                 "player", "player", "player", "player", "player"
            , "player", "player", "player", "player"],  # 给卡牌一个标识符，以区分是玩家还是机器人的牌
        'class': ["攻击类", "攻击类", "攻击类", "攻击类", "防御类", "防御类", "增益类", "增益类", "装备类", "装备类", "装备类", "攻击类", "攻击类", "攻击类",
                  "攻击类", "防御类", "防御类", "增益类", "增益类", "装备类", "装备类", "装备类"]
    }
)

# 假定传入“技能匹配数据表”并读取为dataframe
skills = pd.DataFrame(
    {
        'sno': ['aa','bb','cc','dd','ee','ff'],
        'skill': ['长知识啦', '答案无效', '不断生发', "越战越勇", "坚不可摧", "二次伤害"],
        'hair': [2,0,1,0,1,0],
        'attack': [0,0,0,1,0,2],
        'defend': [0,1,0,0,1,0],
        'process': ["*","*","+","+","+","*"],  # 给卡牌一个标识符，以区分是玩家还是机器人的牌
        'object': ["card", "card", "character", "character", "character", "card"]
    }
)

# 假定传入“人物类型匹配数据表”并读取为dataframe
character_type = pd.DataFrame(
    {'cno':['01','10','02','20','03','30','04','40','05','50'],
     'ctype':['智',"攻",'智',"攻","攻","攻",'防','攻','防','攻']
     }
)

# 假定传入“人技匹配数据表”并读取为dataframe
character_skill = pd.DataFrame(
    {
        'cno' :['01','04','02','10','20','30','40','50','05','03'],
        'sno' :['aa','bb','cc','dd','dd','dd','dd','dd','ee','ff']
    }
)


class Card():
    """卡牌类对象"""

    def __init__(self, name, hair, attack, defend, type, _class):
        """对卡牌进行初始化，有卡排名、加血量、攻击量、防御量五大属性"""
        self.name = name
        self.hair = hair
        self.attack = attack
        self.defend = defend
        self.type = type
        self._class = _class

    def info_show_card(self):
        """显示卡牌的信息"""
        print("*****Loading Card*****")
        print("Name： ", self.name)

        print("Hair： ", self.hair)

        print("Attack： ", self.attack)

        print("Defend： ", self.defend)

        print("Type： ", self.type)

        print("Class: ", self._class)

    def reset_card(self,temp_card,skill):
        if skill.hair != 0:
            temp_card.hair *= skill.hair
        if skill.attack != 0:
            temp_card.attack *= skill.attack
        if skill.defend !=0 :
            temp_card.defend *= skill.defend
        return temp_card
class Role():
    """人物对象"""

    def __init__(self, cno, character, hair, attack, defend, level, type,card_remain_num=0):
        """对人物进行初始化，有角色CNO，角色名、血量、攻击力、防御力、等级、角色人机类型、角色攻防类型，角色剩余卡牌9大属性"""

        self.cno = cno
        self.character = character
        self.hair = hair
        self.attack = attack
        self.defend = defend
        self.level = level
        self.type = type
        self.card_remain_num = card_remain_num
        self.card_remain_list = []
        self.ctype = list(character_type.loc[character_type["cno"] == self.cno]["ctype"].values)[0]
        #首先用人物的CNO与技能的SNO配对，将人物的技能命名为SNO！
        sno = list(character_skill.loc[character_skill["cno"]==self.cno]["sno"].values)[0] #根据人技匹配表(cno)获取人物的技能
        self.skill = skill_dict[sno]   #获得Skill对象

    def info_show_role(self):
        """显示人物的信息"""
        print("*****Loading Role*****")
        print("Character： ", self.character)

        print("Hair： ", self.hair)

        print("Attack： ", self.attack)

        print("Defend： ", self.defend)

        print("Level： ", self.level)

        print("Type： ", self.type)

        print('Ctype:  ',self.ctype )

        print("Card_remain_num： ", self.card_remain_num)


    def attackted(self, harm):
        """实现对人物属性的修改，对接攻击卡牌功能"""
        self.hair -= harm - self.defend
        print("==========你减少了对方" + str(harm - self.defend) + "点发量==========")

    def buffed(self, hair, attack, defend):
        """实现对人物属性的修改，对接增益卡牌功能"""
        if hair > 0 :
            self.hair += hair
            print("==========你的发量恢复了" + str(hair) + "点==========")
        elif attack > 0:
            self.attack += attack
            print("==========你的攻击增加了了" + str(attack) + "点==========")
        elif defend > 0:
            self.defend += defend
            print("==========你的防御增加了了" + str(defend) + "点==========")

    def get_card(self):
        """人物根据手牌余数进行抽牌"""

        self.card_remain_list += card_shuffle(card_list, self.card_remain_num, self.type)

    def use_skill(self):
        """使用技能，如果是对卡牌造成影响，返回一个真值"""
        skill_flag = self.skill.skill_function(self)
        return skill_flag

    def card_function(self, card, role2):
        """实现卡牌的效果"""
        if card._class == "攻击类":
            role2.attackted(card.attack + self.attack)
        else:
            self.buffed(card.hair, card.attack, card.defend)


    def type_check(self,role2):
        """检查人物的属性，并判定是否能够发动技能"""
        if self.ctype == "智" and role2.ctype=="防":
            check = 1
        if self.ctype == "防" and role2.ctype == "攻":
            check = 1
        if self.ctype == "攻" and role2.ctype == "智":
            check = 1
        if self.ctype == "防" and role2.ctype == "智":
            check = 0
        if self.ctype == "攻" and role2.ctype == "防":
            check = 0
        if self.ctype == "智" and role2.ctype == "攻":
            check = 0
        else:
            check = 1
        return check

    def use_card(self, role2):
        """模拟人物使用卡牌的动作"""
        typecheck = self.type_check(role2)
        if typecheck:
            print("Tips：你发动了你的人物技能 <" + self.skill.skill + "> 对你的人物与手牌产生了增益")
            flag = self.use_skill()  #玩家发动技能，flag表示是否对卡牌产生效果

            self.card_remain_num = len(self.card_remain_list)
            while self.card_remain_num > 0:
                # 先展示人物的手牌
                for i in range(self.card_remain_num):
                    print("*****您手里的第" + str(i + 1) + "/" + str(self.card_remain_num) + "张牌是******")
                    self.card_remain_list[i].info_show_card()

                # 用户自定义选择手牌的使用
                ind = input("告诉我您想使用哪一张手牌（输入数字）/ 如果放弃使用(‘q’)，将进入对方回合：")
                if ind == "q":
                    break
                else:
                    ind = int(ind)
                    while ind >= self.card_remain_num + 1:
                        print("Warning: Out of range")
                        ind = int(input("请重新输入："))

                    print("*****您正在使用第" + str(ind) + "张手牌*****")
                    print("*****您的手牌数减1*****")
                    if flag:
                        temp_card = self.card_remain_list[ind - 1]
                        temp_card = (self.card_remain_list[ind - 1]).reset_card(temp_card,self.skill)
                        # 实现卡牌的效果并打印
                        print("*****现在双方的信息发生了如下变动******")

                        self.card_remain_num -= 1

                        self.card_function(temp_card, role2)
                        player.info_show_role()
                        bot.info_show_role()
                    else:
                        # 实现卡牌的效果并打印
                        print("*****现在双方的信息发生了如下变动******")

                        self.card_remain_num -= 1

                        self.card_function(self.card_remain_list[ind - 1], role2)
                        player.info_show_role()
                        bot.info_show_role()

                    print("*****你的手牌发生了变动******")
                    self.card_remain_list.pop(ind - 1)
        else:
            print("Tips：你被对方克制，技能发动受限")
            self.card_remain_num = len(self.card_remain_list)
            while self.card_remain_num > 0:
                # 先展示人物的手牌
                for i in range(self.card_remain_num):
                    print("*****您手里的第" + str(i + 1) + "/" + str(self.card_remain_num) + "张牌是******")
                    self.card_remain_list[i].info_show_card()

                # 用户自定义选择手牌的使用
                ind = input("告诉我您想使用哪一张手牌（输入数字）/ 如果放弃使用(‘q’)，将进入对方回合：")
                if ind == "q":
                    break
                else:
                    ind = int(ind)
                    while ind >= self.card_remain_num + 1:
                        print("Warning: Out of range")
                        ind = int(input("请重新输入："))

                    print("*****您正在使用第" + str(ind) + "张手牌*****")
                    print("*****您的手牌数减1*****")
                    # 实现卡牌的效果并打印
                    print("*****现在双方的信息发生了如下变动******")

                    self.card_remain_num -= 1

                    self.card_function(self.card_remain_list[ind - 1], role2)
                    player.info_show_role()
                    bot.info_show_role()

                print("*****你的手牌发生了变动******")
                self.card_remain_list.pop(ind - 1)


class Skill():
    """人物技能"""

    def __init__(self, sno,skill, hair, attack, defend, process, object):
        self.sno = sno
        self.skill = skill
        self.hair = hair
        self.attack = attack
        self.defend = defend
        self.process = process
        self.object = object


    def skill_function(self,role):
        """发挥skill的作用"""

        if self.object == "character":
            if self.hair > 0:
                role.hair += self.hair;
                print("你回复了"+str(self.hair)+"点发量")
            if self.attack > 0:
                role.attack += self.attack;
                print("你获得了"+str(self.attack)+"点攻击力")
            if self.defend > 0:
                role.defend += self.defend;
                print("你获得了" + str(self.defend) + "点防御力")
            return 0
        else:
            if self.hair >0:
                print("你恢复性手牌将产生"+str(self.hair)+"倍的效果")
            if self.attack>0:
                print("你攻击性手牌将产生" + str(self.attack) + "倍的效果")
            if self.defend>0:
                print("你防御性手牌将产生" + str(self.defend) + "倍的效果")
            return 1  #如果返回1，说明要对卡牌起作用

def game_start():
    """游戏进入"""
    print("Welcom to 《The Great Ma》")
    pass


def game_over():
    """游戏结束时调用"""
    print("主持人：感谢马老师为我们带来的精彩表演，请马老师说出您的获奖感言！")
    print("马保国：我可不是乱来，我可有Uber而来~下面诸位请听听我送给南大信管的获奖致辞：")
    print("【信管人，信管魂】"
          "“信自己，管天下”是他们坚定的信念。“\n"
          "手握日月摘星辰，信管内卷不当人。”线代、数据库不在话下，\n"
          "C++、R语言、数据库门门精通。在南大这片汪洋大海，每位信管人都是跃动在潮头的蓝鲸，\n"
          "探索知识深处的奥秘。今天，他们化鱼为鹏，在数据库课上起飞。“大鹏一日乘风起,扶摇直上九万里”。\n"
          "信息管理，掌管信息和智慧，更掌管人生每一场比赛。今日，他们将以最饱满的热情投身学习，为美好的青春留下浓墨重彩的华章！")


def gne_role(roles_df):
    """传入一个存储人物信息的数据框，并据此进行初始化，返回人物对象列表"""
    role_list = []  # 建立一个存储Role对象的列表
    role_for_player = []
    role_for_bot = []
    for i in range(len(roles_df)):
        temp = Role(roles_df.iloc[i,6],roles_df.iloc[i, 0], roles_df.iloc[i, 1], roles_df.iloc[i, 2], roles_df.iloc[i, 3],
                    roles_df.iloc[i, 4], roles_df.iloc[i, 5])
        if (roles_df.iloc[i, 5] == "player"):
            role_for_player.append(temp)
        else:
            role_for_bot.append(temp)
    role_list = [role_for_player, role_for_bot]
    return role_list


def gne_card(card_df):
    """传入一个存储卡片信息的数据框，并据此进行初始化，返回卡牌对象列表（既包含玩家卡牌，也包含机器人卡牌）"""
    card_list = []  # 建立一个存储card对象的列表
    card_for_player = []
    card_for_bot = []
    for i in range(len(card_df)):
        temp = Card(card_df.iloc[i, 0], card_df.iloc[i, 1], card_df.iloc[i, 2], card_df.iloc[i, 3], card_df.iloc[i, 4],
                    card_df.iloc[i, 5])
        if (card_df.iloc[i, 4] == "player"):
            card_for_player.append(temp)
        else:
            card_for_bot.append(temp)
    card_list = [card_for_player, card_for_bot]
    return card_list

def gne_skill(skill_df):
    """传入一个存储技能信息的数据框，并据此进行初始化，返回人物对象列表（既包含玩家卡牌，也包含机器人卡牌）"""
    skill_dict = {}  # 建立一个存储card对象的字典.键为“sno”，值为对象

    for i in range(len(skill_df)):
        temp = Skill(skill_df.iloc[i, 0], skill_df.iloc[i, 1], skill_df.iloc[i, 2], skill_df.iloc[i, 3], skill_df.iloc[i, 4],
                    skill_df.iloc[i, 5],skill_df.iloc[i,6])
        skill_dict[skill_df.iloc[i, 0]] = temp;
    return skill_dict


def story_telling():
    """场景的进入：显示每一个场景开始时的任务旁白和对话"""
    pass


def skill_function():
    """完成人物技能的显示和效用发挥"""
    pass


def match_enemy(role_list):
    """进行人物匹配，并以此为依据作为场景事件划分，结果返回一个列表，列表的两个元素分别为player和bot"""
    player = role_list[0][scene]  # 选择本场景的玩家role对象
    bot = role_list[1][scene]  # 选择本场景的敌方的role对象
    print("*****" + player.character + " VS " + bot.character + "******")
    match_list = [player, bot]
    return match_list


def card_shuffle(card_list, remain_num, type):
    """将卡牌的抽取并存放进列表中，并完成发放，返回发放所得的列表"""
    shuffled_card_list = []
    if type == "player":
        for i in range(3 - remain_num):
            ind = random.randint(0, len(card_list[0]) - 1)
            shuffled_card_list.append(card_list[0][ind])
    else:
        for i in range(3 - remain_num):
            ind = random.randint(0, len(card_list[1]) - 1)
            shuffled_card_list.append(card_list[1][ind])
    return shuffled_card_list


# 辅助/通用功能
def info_show_role():
    """显示人物的信息"""
    pass


def info_show_card():
    """显示卡牌信息"""
    pass


if __name__ == "__main__":
    # 游戏开始
    game_start()

    # 初始化场景、技能、卡牌和角色
    scene = 0  # 控制变量，场景序数
    skill_dict = gne_skill(skills)
    card_list = gne_card(cards)
    role_lst = gne_role(roles)

    # 选择游戏模式
    rank = input("*****请选择游戏难度：①地狱级(q)；②无敌版(w)；③正常版(e)；*****")
    if rank == 'q':
        roles.loc[0:5,].loc[:,"attack"] =  [3*i for i in list(roles.loc[0:5,].loc[:,"attack"])]
        print("*****游戏难度提升了哦，快来感受老师对你的爱吧~******")
    elif rank == 'w':
        roles.loc[5:11, ].loc[:,"attack"] = [10*i for i in list(roles.loc[5:11, ].loc[:,"attack"])]
        print("*****劝马老师您耗子尾汁~******")
    else:
        pass

    while ((scene + 1) <= 5):
        # 1、场景进入
        print("")
        print("")
        print("***** Scene " + str(scene + 1) + "******")

        # 2、人物匹配
        # 2.0 人物初始化
        role_lst = gne_role(roles)
        # for i in range(2):
        #     for j in range(len(role_lst[i])):
        #          role_lst[i][j].info_show_role()

        # 2.1 战斗匹配
        match_list = match_enemy(role_lst)  # math_list = [player,bot]
        player = match_list[0]
        bot = match_list[1]

        # 3、人物战斗
        # 3.0 卡牌初始化
        card_list = gne_card(cards)

        # 3.1 技能初始化
        skill_dict = gne_skill(skills)


        # 3.2 技能匹配，卡牌发放与人物战斗
        round = 1
        while player.hair > 0 and bot.hair > 0:

            print("")
            print("")
            print("*****round " + str(round) + "*****")
            print("【马保国先手】")
            # 首先是玩家抽牌，发动技能，并使用
            player.get_card()
            player.use_card(bot)


            if bot.hair < 0:
                print("Results: 马保国赢得了这场比赛")
                print("你已经打败了", bot.character)
                print("【Congratulations】 Levels Up!")
                break

            # 其次是机器人抽牌，发动技能并使用
            if bot.hair > 0:
                print("【信管的回合】")
                bot.get_card()
                bot.use_card(player)



            round += 1

        if player.hair < 0:
            print("Results：南大信管永远滴神！")
            print("Results：马保国骂骂咧咧地退出了游戏直播间")
            break




        if scene+1 <= 5:
            flag = input("是否继续下一关卡(y/n?)")
            if flag == "n":
                print("游戏结束，下次再见~")
                break
            else:
                scene += 1


    # 游戏结束
    if player.hair >0:
        print("已经刷到底啦，未来的路还在继续，马老师加油~")
        game_over()






